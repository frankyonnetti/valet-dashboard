/* stylelint-disable value-no-vendor-prefix */
/* stylelint-disable declaration-block-no-duplicate-properties */

:root {
  --active-color: #ba68c8;
  // light
  --border-color: #e0e0e0;
  --bg-color: #f6f6f6;
  // dark
  --border-color-dark: #444;
  --border-color-darker: #353535;
  --bg-color-dark: #171717;
}

// breakpoints
$breakpoint-xs-only: "(max-width: 480px)";
$breakpoint-sm-up: "(min-width: 481px)";
$breakpoint-sm-only: "(min-width: 481px) and (max-width: 768px)";
$breakpoint-md-up: "(min-width: 769px)";
$breakpoint-md-only: "(min-width: 769px) and (max-width: 992px)";
$breakpoint-lg-up: "(min-width: 993px)";
$breakpoint-lg-only: "(min-width: 993px) and (max-width: 1200px)";
$breakpoint-xl-up: "(min-width: 1201px)";

// Convert px to rem
@function rem($pixels, $context: 16) {
  @return math.div($pixels, $context) * 1rem;
}

// container box
@mixin container-box($themeMode: light) {
  border-radius: 14px;
  background-color: #fff;
  box-shadow: 0 1px 14px 5px rgba(#000, 0.05);
  margin-bottom: 1.5rem;
  padding: 1.5rem;
  @if $themeMode == "dark" {
    background-color: #252525;
    box-shadow: inset 0 0 0 1px rgba(#fff, 0.07), 0 1px 14px 5px rgba(#000, 0.15);
  }
}

// vertical/horizontal gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}
